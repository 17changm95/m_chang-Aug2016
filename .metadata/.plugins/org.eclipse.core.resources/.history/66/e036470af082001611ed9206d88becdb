/**
 * 
 */

/**
 * @author Michael Chang
 * Created 8/30/2016
 *
 */
public class Calculate {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}
	
	public static double square(double num){
		double answer = num * num;
		return answer;
	}
	
	public static double cube(double num){
		double answer = num * num * num;
		return answer;
	}
	
	public static double average(double num1, double num2){
		double answer = (num1 + num2)/2;
		return answer;
	}
	
	public static double average(double num1, double num2, double num3){
		double answer = (num1 + num2 + num3)/3;
		return answer;
	}
	
	public static double toDegrees(double angleMeasure){
		double answer = angleMeasure * 180 / 3.14159;
		return answer;
	}
	
	public static double toRadians(double angleMeasure){
		double answer = angleMeasure * 3.14159 / 180;
		return answer;
	}
	
	public static double discriminant(double a, double b, double c){
		double answer = square(b) - 4 * a * c;
		return answer;
	}
	
	public static String toImproperFrac(int wholeNum, int numerator1, int denominator){
		int numerator2 = denominator * wholeNum + numerator1;
		String answer = numerator2 + "/" + denominator;
		return answer;
	}
	
	public static String toMixedNum(int numerator1, int denominator){
		int whole = numerator1 / denominator;
		int numerator2 = numerator1 % denominator;
		String answer = whole + "_" + numerator2 + "/" + denominator;
		return answer;
	}
	
	public static String foil(int a, int b, int c, int d, String var){
		int firstCoeff = a * c;
		int secondCoeff = (a * d) + (b * c);
		int thirdCoeff = b * d;
		String op1;
		String op2;
		// I found it necessary to use conditional statements below in order to make the plus and minus operators in the quadratic equation to reflect the sign of the coefficient.
		if (secondCoeff > 0) {
			op1 = "+";
		} else if (secondCoeff < 0) {
			op1 = "";
		} else {
			op1 = "";
		}
		
		if (thirdCoeff > 0) {
			op2 = "+";
		} else if (thirdCoeff < 0) {
			op2 = "";
		} else {
			op2 = "";
		}
		
		String answer = firstCoeff + var + "^2" + op1 + secondCoeff + var + op2 + thirdCoeff;
		return answer;
	}
	
	public static boolean isDivisibleBy(int dividend, int divisor) {
		if (dividend % divisor == 0) {
			return true;
		} if (divisor == 0) throw new IllegalArgumentException("Undefined");
		else {
			return false;
		}
	}
	
	public static double absValue(double num) {
		if (num < 0) {
			return num * (-1);
		} else {
			return num;
		}
	}
	
	public static int max(int num1, int num2) {
		if (num1 > num2) {
			return num1;
		} 
		if (num2 > num1) {
			return num2;
		} else {
			return num1;
		}
	}
	
	public static double max(double num1, double num2, double num3) {
		if (num1 > num2 && num1 > num3) {
			return num1;
		}
		if (num2 > num1 && num2 > num3) {
			return num2;
		}
		if (num3 > num1 && num3 > num2) {
			return num3;
		} else {
			return num1;
		}
	}	
	
	public static int min(int num1, int num2) {
		if (num1 < num2) {
			return num1;
		} else {
			return num1;
		}
	}
	
	public static double round2(double num) {
		double numAdded = num + 0.005;
		double numMult = numAdded * 100;
		int numCasted = (int) numMult;
		double answer = (double) numCasted / 100.0;
		
		return answer;
	}
	
	public static double exponent(double num, int pwr) {
		double newNum = 1;		
		if (num >= 0) {
			for (int i = 1; i <= pwr; i++) {
				newNum *= num;
			}
		} if (num < 0) throw new IllegalArgumentException("Not possible to make to the power of right now");
		return newNum;
	}
	
	public static int factorial(int num) {
		int prevNum = num - 1;
		int answer = 0; //primed variable
		if (num <= 0) throw new IllegalArgumentException("Undefined");
		else {
		while (prevNum > 1) {
			num *= prevNum; // num = num * prevNum
			prevNum--;
			answer = num;
		}
		return answer;
		}
	}
	
	public static boolean isPrime(int dividend) {		
		int divisor = 2;
		boolean quotient = true; //primed
		
		while (divisor < dividend) {
			if (isDivisibleBy(dividend, divisor) == false){
				divisor++;
			} else if (isDivisibleBy(dividend, divisor) == true) {
				return quotient = false;				
			} else {
				return quotient = true;
			}
		}
		return quotient;
	}
	
	public static int gcf(int a, int b) {
		// this method follows the Euclidean algorithm		
		int num1 = 0;
		int num2 = 0;
		int answerOfMod = 0;
		
		num1 = max(a,b);
		//called max method
		num2 = min(a,b);
		//called min method
		//called in total two methods from calculate library
		
		while (num2 != 0) {
			answerOfMod = num1 % num2;
			num1 = num2;
			num2 = answerOfMod;
		}
		return num1;
	}
	
	public static double sqrt(double num) {
		num = round2(num);
		double guess = 1.;
		double answer = 0;
		
		if (num <= 0) throw new IllegalArgumentException("Imaginary number");
		else {
		while (square(answer) != num) {
			guess = ((double)guess + num/guess)/2;
			answer = round2(guess);
		}
		return answer;
		}	
	}
	
	public static String quadform (int a, int b, int c) {
		
	}
}